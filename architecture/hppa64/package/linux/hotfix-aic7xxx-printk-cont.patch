# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/linux/hotfix-aic7xxx-printk-cont.patch
# Copyright (C) 2024 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

Since Linus Torvalds reinstaded KERN_CONT in commit 4bcc595
in 2015, the qla1280 scsi driver printed a rather ugly and
screen real estate wasting status during boot. Fix by
adding KERN_CONT as needed.

--- linux-6.6/drivers/scsi/aic7xxx/aic7xxx_core.c.vanilla	2024-01-07 15:06:03.131222890 +0100
+++ linux-6.6/drivers/scsi/aic7xxx/aic7xxx_core.c	2024-01-07 15:08:59.998242433 +0100
@@ -1014,7 +1014,7 @@
 		scb = ahc_lookup_scb(ahc, scb_index);
 		if (scb == NULL) {
 			ahc_print_devinfo(ahc, &devinfo);
-			printk("ahc_intr - referenced scb "
+			printk(KERN_CONT "ahc_intr - referenced scb "
 			       "not valid during seqint 0x%x scb(%d)\n",
 			       intstat, scb_index);
 			ahc_dump_card_state(ahc);
@@ -1351,7 +1351,7 @@
 					u_int	scb_index;
 
 					ahc_print_devinfo(ahc, &devinfo);
-					printk("Unable to clear parity error.  "
+					printk(KERN_CONT "Unable to clear parity error.  "
 					       "Resetting bus.\n");
 					scb_index = ahc_inb(ahc, SCB_TAG);
 					scb = ahc_lookup_scb(ahc, scb_index);
@@ -2993,7 +2993,7 @@
 
 		if (bootverbose) {
 			ahc_print_devinfo(ahc, devinfo);
-			printk("Ensuring async\n");
+			printk(KERN_CONT "Ensuring async\n");
 		}
 	}
 
@@ -3134,7 +3134,7 @@
 		 * to match.
 		 */
 		ahc_print_devinfo(ahc, &devinfo);
-		printk("Target did not send an IDENTIFY message. "
+		printk(KERN_CONT "Target did not send an IDENTIFY message. "
 		       "LASTPHASE = 0x%x.\n", lastphase);
 		scb = NULL;
 	} else if (scb == NULL) {
@@ -3143,7 +3143,7 @@
 		 * transaction.  Print an error and reset the bus.
 		 */
 		ahc_print_devinfo(ahc, &devinfo);
-		printk("No SCB found during protocol violation\n");
+		printk(KERN_CONT "No SCB found during protocol violation\n");
 		goto proto_violation_reset;
 	} else {
 		ahc_set_transaction_status(scb, CAM_SEQUENCE_FAIL);
@@ -3198,7 +3198,7 @@
 			ahc_print_path(ahc, scb);
 			scb->flags |= SCB_ABORT;
 		}
-		printk("Protocol violation %s.  Attempting to abort.\n",
+		printk(KERN_CONT "Protocol violation %s.  Attempting to abort.\n",
 		       ahc_lookup_phase_entry(curphase)->phasemsg);
 	}
 }
@@ -3231,7 +3231,7 @@
 #ifdef AHC_DEBUG
 		if ((ahc_debug & AHC_SHOW_MESSAGES) != 0) {
 			ahc_print_devinfo(ahc, &devinfo);
-			printk("INITIATOR_MSG_OUT");
+			printk(KERN_CONT "INITIATOR_MSG_OUT");
 		}
 #endif
 		phasemis = bus_phase != P_MESGOUT;
@@ -3309,7 +3309,7 @@
 #ifdef AHC_DEBUG
 		if ((ahc_debug & AHC_SHOW_MESSAGES) != 0) {
 			ahc_print_devinfo(ahc, &devinfo);
-			printk("INITIATOR_MSG_IN");
+			printk(KERN_CONT "INITIATOR_MSG_IN");
 		}
 #endif
 		phasemis = bus_phase != P_MESGIN;
@@ -3359,7 +3359,7 @@
 #ifdef AHC_DEBUG
 				if ((ahc_debug & AHC_SHOW_MESSAGES) != 0) {
 					ahc_print_devinfo(ahc, &devinfo);
-					printk("Asserting ATN for response\n");
+					printk(KERN_CONT "Asserting ATN for response\n");
 				}
 #endif
 				ahc_assert_atn(ahc);
--- linux-6.6/drivers/scsi/aic7xxx/aic7xxx_osm.c.vanilla	2024-01-07 14:25:14.705952345 +0100
+++ linux-6.6/drivers/scsi/aic7xxx/aic7xxx_osm.c	2024-01-07 15:09:41.725247044 +0100
@@ -1390,7 +1390,7 @@
 		ahc_send_async(ahc, devinfo.channel, devinfo.target,
 			       devinfo.lun, AC_TRANSFER_NEG);
 		ahc_print_devinfo(ahc, &devinfo);
-		printk("Tagged Queuing enabled.  Depth %d\n", tags);
+		printk(KERN_CONT "Tagged Queuing enabled. Depth %d\n", tags);
 	} else {
 		ahc_platform_set_tags(ahc, sdev, &devinfo, AHC_QUEUE_NONE);
 		ahc_send_async(ahc, devinfo.channel, devinfo.target,
