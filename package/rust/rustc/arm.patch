# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/rustc/arm.patch
# Copyright (C) 2022 - 2024 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

--- rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_gnueabihf.rs	2022-11-02 15:36:24.000000000 +0100
+++ rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_gnueabihf.rs	2022-11-16 11:55:28.720457441 +0100
@@ -2,13 +2,13 @@
 
 pub fn target() -> Target {
     Target {
-        llvm_target: "armv5te-unknown-linux-gnueabi".into(),
+        llvm_target: "armv5te-unknown-linux-gnueabihf".into(),
         pointer_width: 32,
         data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
         arch: "arm".into(),
         options: TargetOptions {
-            abi: "eabi".into(),
-            features: "+soft-float,+strict-align".into(),
+            abi: "eabihf".into(),
+            features: "+vfp2,+strict-align".into(),
             // Atomic operations provided by compiler-builtins
             max_atomic_width: Some(32),
             mcount: "\u{1}__gnu_mcount_nc".into(),
--- rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv6_unknown_linux_gnueabihf.rs.vanilla	2022-11-16 15:08:13.743254206 +0100
+++ rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv6_unknown_linux_gnueabihf.rs	2022-11-16 15:08:21.832253365 +0100
@@ -2,7 +2,7 @@
 
 pub fn target() -> Target {
     Target {
-        llvm_target: "arm-unknown-linux-gnueabihf".into(),
+        llvm_target: "armv6-unknown-linux-gnueabihf".into(),
         pointer_width: 32,
         data_layout: "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
         arch: "arm".into(),
--- rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabi.rs.vanilla	2022-11-16 15:21:29.841171380 +0100
+++ rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabi.rs	2022-11-16 15:21:52.838168987 +0100
@@ -3,13 +3,13 @@
 
 pub fn target() -> Target {
     Target {
-        llvm_target: "armeb-unknown-linux-gnueabi".into(),
+        llvm_target: "armv6eb-unknown-linux-gnueabi".into(),
         pointer_width: 32,
         data_layout: "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
         arch: "arm".into(),
         options: TargetOptions {
             abi: "eabi".into(),
-            features: "+strict-align,+v8,+crc".into(),
+            features: "+strict-align,+v6,+soft-float,+crc".into(),
             endian: Endian::Big,
             max_atomic_width: Some(64),
             mcount: "\u{1}__gnu_mcount_nc".into(),
--- rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabihf.rs.vanilla	2022-11-16 15:04:51.849275212 +0100
+++ rustc-1.65.0-src/compiler/rustc_target/src/spec/targets/armv6eb_unknown_linux_gnueabihf.rs	2022-11-16 15:05:23.552271913 +0100
@@ -3,13 +3,13 @@
 
 pub fn target() -> Target {
     Target {
-        llvm_target: "armeb-unknown-linux-gnueabi".into(),
+        llvm_target: "armv6eb-unknown-linux-gnueabihf".into(),
         pointer_width: 32,
         data_layout: "E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64".into(),
         arch: "arm".into(),
         options: TargetOptions {
-            abi: "eabi".into(),
-            features: "+strict-align,+v8,+crc".into(),
+            abi: "eabihf".into(),
+            features: "+strict-align,+v6,+vfp2,+crc".into(),
             endian: Endian::Big,
             max_atomic_width: Some(64),
             mcount: "\u{1}__gnu_mcount_nc".into(),
