# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/linux/spd-5118_parity_1_2.patch
# Copyright (C) 2024 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License version 2 as used by the T2 SDE.
# --- T2-COPYRIGHT-NOTE-END ---

Return-path: <hristo@venev.name>
Envelope-to: rene@exactcode.de
Delivery-date: Sun, 28 May 2023 16:03:28 +0000
Received: from a1-bg02.venev.name ([213.240.239.49])
	by exactco.de with esmtps (TLSv1.2:ECDHE-RSA-AES256-GCM-SHA384:256)
	(Exim 4.86_2)
	(envelope-from <hristo@venev.name>)
	id 1q3Ire-0002w9-JN
	for rene@exactcode.de; Sun, 28 May 2023 16:03:28 +0000
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed; d=venev.name;
	s=default; h=Content-Transfer-Encoding:Message-Id:Date:Subject:To:From:
	Content-Type:Reply-To:Sender; bh=MXDE2qDkufBFYa7FD7DoVdfwH3/r/Wf1VWmo6eh5f0o=
	; b=hv3Mflb4FeXCU1+rxhu9dN67lXpohNh4tziPDb1k1b5rygknETmcNoqxYEydUxHos5L1Zouvc
	VLK6dPp/c+0tuoYelNw+RKkXIn66urzFpNRo6fwJdnTKL1fDr6zeIM9sswxWX0ol0wP28HJjuRBn5
	3Yq8PC0yE+bb/2n2XcbedE3kPCLRlL4YGwMRgRCM4ySurdDfyUozsmwUOOd3aqJjVfAooWdC9d+1P
	Cid2yJr1dXhUdDhw4TurcKY2qcSSbRz5TlUKubphIMP87Pn9uTyrSG4q6s3qx2jOdjwJtbkjk7U6e
	EoJ7lUCrPd0ElhRqB60fyE7q1JYsTw+pxcNCteEYBWP5oQBR5bzT0a0x/ea9bU0LWXMaOJ9uKBSUd
	Z/pua8hliUs248tNktiOcPU7e3GvziXO36sAY0yPjXba+SuXr+7YEVZm97ipyvG2N9Dpzs4YeguOM
	cZVEkAp4yWRibP2GgpLm9Hacb9yNGJyh3BPBeU8UzTEGONa0lUxpL6CqtemBWA3vhzoMOPo5hj7YL
	R1BeDHch54Lvn4ZgB7BZQEXFmmf74pcuyy8xIt1B1Qyh44IToWLHdt6Mwy04hpeJfjM7jBjkdcbXI
	e3Sweqoq8+s7d55NGlOzNKYU2gpFjMAxj+Uz7u+4c3zC1Q9ts8DhClp3Cdt44e2Msn7m7lI=;
Received: from a1-bg02.venev.name ([213.240.239.49] helo=pmx1.venev.name)
	by a1-bg02.venev.name with esmtps
	id 1q3Ilx-0012Kk-16
	(TLS1.3:TLS_AES_256_GCM_SHA384:256)
	(envelope-from <hristo@venev.name>);
	Sun, 28 May 2023 15:57:34 +0000
Received: from venev.name ([213.240.239.49])
	by pmx1.venev.name with ESMTPSA
	id 6ODjBux5c2QBxgMAdB6GMg:T2
	(envelope-from <hristo@venev.name>); Sun, 28 May 2023 15:57:34 +0000
From: Hristo Venev <hristo@venev.name>
To: =?UTF-8?q?Ren=C3=A9=20Rebe?= <rene@exactcode.de>
Cc: Hristo Venev <hristo@venev.name>
Subject: [PATCH 1/2] bitops: Define parity*() functions
Date: Sun, 28 May 2023 18:56:51 +0300
Message-Id: <20230528155651.247195-2-hristo@venev.name>
X-Mailer: git-send-email 2.40.1
In-Reply-To: <BCF33206-A17C-48F0-A45D-0870B094290A@exactcode.de>
References: <BCF33206-A17C-48F0-A45D-0870B094290A@exactcode.de>
MIME-Version: 1.0
Content-Transfer-Encoding: 8bit
X-Spam-Score: 3.8 (+++)
X-Spam-Report: Spam detection software, running on the system "exactcode.de", has
 identified this incoming email as possible spam.  The original message
 has been attached to this so you can view it (if it isn't spam) or label
 similar future email.  If you have any questions, see
 the administrator of that system for details.
 
 Content preview:  The functions are similar to hweight*(), but somewhat simpler
    as they only need to compute the bottom bit of the result. Thus, it almost
    always makes sense to inline them. Architectures that have non-generic versions
    should only include `const_parity.h` and override `arch_parity.h`. [...] 
 
 Content analysis details:   (3.8 points, 5.0 required)
 
  pts rule name              description
 ---- ---------------------- --------------------------------------------------
  2.8 RCVD_BAD_ID            RCVD_BAD_ID
  0.0 BAYES_50               BODY: Bayesian spam probability is 40 to 60%
                             [score: 0.4978]
  1.0 DNS_FROM_AHBL_RHSBL    RBL: Envelope sender listed in dnsbl.ahbl.org

The functions are similar to hweight*(), but somewhat simpler as they
only need to compute the bottom bit of the result. Thus, it almost
always makes sense to inline them.

Architectures that have non-generic versions should only include
`const_parity.h` and override `arch_parity.h`.

Signed-off-by: Hristo Venev <hristo@venev.name>
---
 arch/alpha/include/asm/bitops.h           |  2 ++
 arch/arc/include/asm/bitops.h             |  1 +
 arch/arm/include/asm/bitops.h             |  1 +
 arch/arm64/include/asm/bitops.h           |  1 +
 arch/csky/include/asm/bitops.h            |  1 +
 arch/hexagon/include/asm/bitops.h         |  1 +
 arch/ia64/include/asm/bitops.h            |  2 ++
 arch/loongarch/include/asm/bitops.h       |  1 +
 arch/m68k/include/asm/bitops.h            |  1 +
 arch/mips/include/asm/bitops.h            |  2 ++
 arch/openrisc/include/asm/bitops.h        |  1 +
 arch/parisc/include/asm/bitops.h          |  1 +
 arch/powerpc/include/asm/bitops.h         |  2 ++
 arch/riscv/include/asm/bitops.h           |  1 +
 arch/s390/include/asm/bitops.h            |  1 +
 arch/sh/include/asm/bitops.h              |  1 +
 arch/x86/include/asm/bitops.h             |  2 ++
 arch/xtensa/include/asm/bitops.h          |  1 +
 include/asm-generic/bitops/arch_parity.h  | 28 ++++++++++++++++++
 include/asm-generic/bitops/const_parity.h | 35 +++++++++++++++++++++++
 include/asm-generic/bitops/parity.h       |  8 ++++++
 21 files changed, 94 insertions(+)
 create mode 100644 include/asm-generic/bitops/arch_parity.h
 create mode 100644 include/asm-generic/bitops/const_parity.h
 create mode 100644 include/asm-generic/bitops/parity.h

diff --git a/arch/alpha/include/asm/bitops.h b/arch/alpha/include/asm/bitops.h
index bafb1c1f0fdc..7fb1c6a065d2 100644
--- a/arch/alpha/include/asm/bitops.h
+++ b/arch/alpha/include/asm/bitops.h
@@ -425,6 +425,8 @@ static inline unsigned int __arch_hweight8(unsigned int w)
 
 #include <asm-generic/bitops/const_hweight.h>
 
+#include <asm-generic/bitops/parity.h>
+
 #endif /* __KERNEL__ */
 
 #ifdef __KERNEL__
diff --git a/arch/arc/include/asm/bitops.h b/arch/arc/include/asm/bitops.h
index f5a936496f06..4cbf4e18d4bd 100644
--- a/arch/arc/include/asm/bitops.h
+++ b/arch/arc/include/asm/bitops.h
@@ -183,6 +183,7 @@ static inline __attribute__ ((const)) unsigned long __ffs(unsigned long x)
 #define ffz(x)	__ffs(~(x))
 
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/fls64.h>
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/lock.h>
diff --git a/arch/arm/include/asm/bitops.h b/arch/arm/include/asm/bitops.h
index 714440fa2fc6..286f6a6bbc2e 100644
--- a/arch/arm/include/asm/bitops.h
+++ b/arch/arm/include/asm/bitops.h
@@ -242,6 +242,7 @@ unsigned long _find_next_bit_be(const unsigned long *p, unsigned long size, unsi
 
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/lock.h>
 
 #ifdef __ARMEB__
diff --git a/arch/arm64/include/asm/bitops.h b/arch/arm64/include/asm/bitops.h
index 9b3c787132d2..af753e8a5177 100644
--- a/arch/arm64/include/asm/bitops.h
+++ b/arch/arm64/include/asm/bitops.h
@@ -21,6 +21,7 @@
 
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 
 #include <asm-generic/bitops/atomic.h>
 #include <asm-generic/bitops/lock.h>
diff --git a/arch/csky/include/asm/bitops.h b/arch/csky/include/asm/bitops.h
index 72e1b2aa29a0..f604e2a9e6a1 100644
--- a/arch/csky/include/asm/bitops.h
+++ b/arch/csky/include/asm/bitops.h
@@ -66,6 +66,7 @@ static __always_inline unsigned long __fls(unsigned long x)
 
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/lock.h>
 #include <asm-generic/bitops/atomic.h>
 
diff --git a/arch/hexagon/include/asm/bitops.h b/arch/hexagon/include/asm/bitops.h
index 160d8f37fa1a..eb1a4ce727fb 100644
--- a/arch/hexagon/include/asm/bitops.h
+++ b/arch/hexagon/include/asm/bitops.h
@@ -296,6 +296,7 @@ static inline unsigned long __fls(unsigned long word)
 #include <asm-generic/bitops/fls64.h>
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 
 #include <asm-generic/bitops/le.h>
 #include <asm-generic/bitops/ext2-atomic.h>
diff --git a/arch/ia64/include/asm/bitops.h b/arch/ia64/include/asm/bitops.h
index 1accb7842f58..25c05a7a3efd 100644
--- a/arch/ia64/include/asm/bitops.h
+++ b/arch/ia64/include/asm/bitops.h
@@ -436,6 +436,8 @@ static __inline__ unsigned long __arch_hweight64(unsigned long x)
 
 #include <asm-generic/bitops/const_hweight.h>
 
+#include <asm-generic/bitops/parity.h>
+
 #endif /* __KERNEL__ */
 
 #ifdef __KERNEL__
diff --git a/arch/loongarch/include/asm/bitops.h b/arch/loongarch/include/asm/bitops.h
index 69e00f8d8034..0f8df8d12e02 100644
--- a/arch/loongarch/include/asm/bitops.h
+++ b/arch/loongarch/include/asm/bitops.h
@@ -23,6 +23,7 @@
 
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 
 #include <asm-generic/bitops/atomic.h>
 #include <asm-generic/bitops/non-atomic.h>
diff --git a/arch/m68k/include/asm/bitops.h b/arch/m68k/include/asm/bitops.h
index e984af71df6b..a042204edddc 100644
--- a/arch/m68k/include/asm/bitops.h
+++ b/arch/m68k/include/asm/bitops.h
@@ -542,6 +542,7 @@ static inline unsigned long __fls(unsigned long x)
 #include <asm-generic/bitops/fls64.h>
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/le.h>
 #endif /* __KERNEL__ */
 
diff --git a/arch/mips/include/asm/bitops.h b/arch/mips/include/asm/bitops.h
index b4bf754f7db3..dcecb36d8f0a 100644
--- a/arch/mips/include/asm/bitops.h
+++ b/arch/mips/include/asm/bitops.h
@@ -452,6 +452,8 @@ static inline int ffs(int word)
 #include <asm/arch_hweight.h>
 #include <asm-generic/bitops/const_hweight.h>
 
+#include <asm-generic/bitops/parity.h>
+
 #include <asm-generic/bitops/le.h>
 #include <asm-generic/bitops/ext2-atomic.h>
 
diff --git a/arch/openrisc/include/asm/bitops.h b/arch/openrisc/include/asm/bitops.h
index d773ed938acb..682d2d4174f6 100644
--- a/arch/openrisc/include/asm/bitops.h
+++ b/arch/openrisc/include/asm/bitops.h
@@ -38,6 +38,7 @@
 #include <asm-generic/bitops/sched.h>
 #include <asm/bitops/ffs.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/lock.h>
 
 #include <asm/bitops/atomic.h>
diff --git a/arch/parisc/include/asm/bitops.h b/arch/parisc/include/asm/bitops.h
index 0ec9cfc5131f..f9bdad369c92 100644
--- a/arch/parisc/include/asm/bitops.h
+++ b/arch/parisc/include/asm/bitops.h
@@ -201,6 +201,7 @@ static __inline__ int fls(unsigned int x)
 #include <asm-generic/bitops/__fls.h>
 #include <asm-generic/bitops/fls64.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/lock.h>
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/le.h>
diff --git a/arch/powerpc/include/asm/bitops.h b/arch/powerpc/include/asm/bitops.h
index 7e0f0322912b..a179d279d3d4 100644
--- a/arch/powerpc/include/asm/bitops.h
+++ b/arch/powerpc/include/asm/bitops.h
@@ -328,6 +328,8 @@ unsigned long __arch_hweight64(__u64 w);
 #include <asm-generic/bitops/hweight.h>
 #endif
 
+#include <asm-generic/bitops/parity.h>
+
 /* wrappers that deal with KASAN instrumentation */
 #include <asm-generic/bitops/instrumented-atomic.h>
 #include <asm-generic/bitops/instrumented-lock.h>
diff --git a/arch/riscv/include/asm/bitops.h b/arch/riscv/include/asm/bitops.h
index 3540b690944b..8d92a7948fbf 100644
--- a/arch/riscv/include/asm/bitops.h
+++ b/arch/riscv/include/asm/bitops.h
@@ -272,8 +272,8 @@
 #include <asm-generic/bitops/sched.h>
 
 #include <asm/arch_hweight.h>
-
 #include <asm-generic/bitops/const_hweight.h>
+#include <asm-generic/bitops/parity.h>
 
 #if (BITS_PER_LONG == 64)
 #define __AMO(op)	"amo" #op ".d"
diff --git a/arch/s390/include/asm/bitops.h b/arch/s390/include/asm/bitops.h
index 2de74fcd0578..eb08069432b0 100644
--- a/arch/s390/include/asm/bitops.h
+++ b/arch/s390/include/asm/bitops.h
@@ -371,6 +371,7 @@ static inline int fls(unsigned int word)
 
 #include <asm-generic/bitops/ffz.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/le.h>
 #include <asm-generic/bitops/ext2-atomic-setbit.h>
diff --git a/arch/sh/include/asm/bitops.h b/arch/sh/include/asm/bitops.h
index 10ceb0d6b5a9..c1e605a87714 100644
--- a/arch/sh/include/asm/bitops.h
+++ b/arch/sh/include/asm/bitops.h
@@ -60,6 +60,7 @@ static inline unsigned long __ffs(unsigned long word)
 
 #include <asm-generic/bitops/ffs.h>
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/lock.h>
 #include <asm-generic/bitops/sched.h>
 #include <asm-generic/bitops/ext2-atomic.h>
diff --git a/arch/x86/include/asm/bitops.h b/arch/x86/include/asm/bitops.h
index 2edf68475fec..eb6fb4d956b5 100644
--- a/arch/x86/include/asm/bitops.h
+++ b/arch/x86/include/asm/bitops.h
@@ -421,6 +421,8 @@ static __always_inline int fls64(__u64 x)
 
 #include <asm-generic/bitops/const_hweight.h>
 
+#include <asm-generic/bitops/parity.h>
+
 #include <asm-generic/bitops/instrumented-atomic.h>
 #include <asm-generic/bitops/instrumented-non-atomic.h>
 #include <asm-generic/bitops/instrumented-lock.h>
diff --git a/arch/xtensa/include/asm/bitops.h b/arch/xtensa/include/asm/bitops.h
index e02ec5833389..98b5ed6b4e64 100644
--- a/arch/xtensa/include/asm/bitops.h
+++ b/arch/xtensa/include/asm/bitops.h
@@ -212,6 +212,7 @@ BIT_OPS(change, "xor", )
 #include <asm-generic/bitops/ext2-atomic-setbit.h>
 
 #include <asm-generic/bitops/hweight.h>
+#include <asm-generic/bitops/parity.h>
 #include <asm-generic/bitops/lock.h>
 #include <asm-generic/bitops/sched.h>
 
diff --git a/include/asm-generic/bitops/arch_parity.h b/include/asm-generic/bitops/arch_parity.h
new file mode 100644
index 000000000000..35d793b33a40
--- /dev/null
+++ b/include/asm-generic/bitops/arch_parity.h
@@ -0,0 +1,28 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_GENERIC_BITOPS_ARCH_PARITY_H_
+#define _ASM_GENERIC_BITOPS_ARCH_PARITY_H_
+
+#include <asm/types.h>
+
+static inline bool __arch_parity8(u8 w)
+{
+	w ^= w >> 4;
+	return (0x6996 >> (w & 0xf)) & 1;
+}
+
+static inline bool __arch_parity16(u16 w)
+{
+	return parity8(w ^ (w >> 8));
+}
+
+static inline bool __arch_parity32(u32 w)
+{
+	return parity16(w ^ (w >> 16));
+}
+
+static inline bool __arch_parity64(u64 w)
+{
+	return parity32(w ^ (w >> 32));
+}
+
+#endif /* _ASM_GENERIC_BITOPS_PARITY_H_ */
diff --git a/include/asm-generic/bitops/const_parity.h b/include/asm-generic/bitops/const_parity.h
new file mode 100644
index 000000000000..b1c02fa0a5cf
--- /dev/null
+++ b/include/asm-generic/bitops/const_parity.h
@@ -0,0 +1,35 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_GENERIC_BITOPS_CONST_PARITY_H_
+#define _ASM_GENERIC_BITOPS_CONST_PARITY_H_
+
+/*
+ * Compile time versions of __arch_parityN()
+ */
+#define __const_parity4(w) ((0x6996 >> ((w) & 0xf)) & 1)
+#define __const_parity8(w) (__const_parity4((w) ^ (w) >> 4))
+#define __const_parity16(w) (__const_parity8((w) ^ (w) >> 8))
+#define __const_parity32(w) (__const_parity16((w) ^ (w) >> 16))
+#define __const_parity64(w) (__const_parity32((w) ^ (w) >> 32))
+
+/*
+ * Generic interface.
+ */
+#define parity8(w)  (__builtin_constant_p(w) ? __const_parity8(w)  : __arch_parity8(w))
+#define parity16(w) (__builtin_constant_p(w) ? __const_parity16(w) : __arch_parity16(w))
+#define parity32(w) (__builtin_constant_p(w) ? __const_parity32(w) : __arch_parity32(w))
+#define parity64(w) (__builtin_constant_p(w) ? __const_parity64(w) : __arch_parity64(w))
+
+/*
+ * Interface for known constant arguments
+ */
+#define PARITY8(w)  (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_parity8(w))
+#define PARITY16(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_parity16(w))
+#define PARITY32(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_parity32(w))
+#define PARITY64(w) (BUILD_BUG_ON_ZERO(!__builtin_constant_p(w)) + __const_parity64(w))
+
+/*
+ * Type invariant interface to the compile time constant parity functions.
+ */
+#define PARITY(w)   PARITY64((u64)w)
+
+#endif /* _ASM_GENERIC_BITOPS_CONST_PARITY_H_ */
diff --git a/include/asm-generic/bitops/parity.h b/include/asm-generic/bitops/parity.h
new file mode 100644
index 000000000000..229b08a57d5f
--- /dev/null
+++ b/include/asm-generic/bitops/parity.h
@@ -0,0 +1,8 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_GENERIC_BITOPS_PARITY_H_
+#define _ASM_GENERIC_BITOPS_PARITY_H_
+
+#include <asm-generic/bitops/const_parity.h>
+#include <asm-generic/bitops/arch_parity.h>
+
+#endif /* _ASM_GENERIC_BITOPS_PARITY_H_ */
-- 
2.40.1

